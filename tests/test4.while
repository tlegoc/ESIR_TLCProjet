function add :
read Op1, Op2
%
    Result := Op1 ;
    for Op2 do
        Result := ( cons nil Result )
    od
%
write Result

function test:
read Op1, Op2
%
    Result := (cons);
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (tl Result);
    Result := (hd Result);
    Result := (list Result Result Result Result);
    Result := (cons Result Result Result Result);

    while Op2
    do
        Result := (list Result);
        Test := (cons)
    od;

    Test := (cons)
%
write Result

function sub :
read Op1, Op2
%
    Result := Op1;
    for Op2 do
        Result := (tl Result)
    od
%
write Result

function mul :
read Op1, Op2
%
    Result := nil;
    for Op1 do
        Result := (add Result Op2)
    od
%
write Result

function test2:
read Op1, Op2
%
    Result := (cons);
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons))
%
write Result

function truefunc :
read
%
    Result := (cons nil nil)
%
write Result

function falsefunc :
read
%
    Result := nil
%
write Result

function notfunc :
read Op1
%
    Result := nil;
    if Op1 then Result := (falsefunc) else Result := (truefunc) fi
%
write Result

function andfunc :
read Op1, Op2
%
    Result := nil;
    if (notfunc Op1) then
        Result := (falsefunc)
    else
        if (notfunc Op2) then
            Result := (falsefunc)
        else
            Result := (truefunc)
        fi
    fi
%
write Result
