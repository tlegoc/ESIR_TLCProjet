function add :
read Op1, Op2
%
    Result := Op1 ;
    for Op2 do
        Result := ( cons nil Result )
    od
%
write Result

function test:
read Op1, Op2
%
    nop;
    Result := (cons);
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (tl Result);
    Result := (hd Result);
    Result := (list Result Result Result Result);
    Result := (cons Result Result Result Result);

    while Op2
    do
        Result := (list Result);
        Test := (cons)
    od;

    while (cons Result (add Result(cons)))
    do
        Result := (cons)
    od;

    Test := (cons)
%
write Result

function sub :
read Op1, Op2
%
    Result := Op1;
    for Op2 do
        Result := (tl Result)
    od
%
write Result

function mul :
read Op1, Op2
%
    for Op1 do
        Result := (add Result Op2)
    od
%
write Result

function test2:
read Op1, Op2
%
    Result := (cons);
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons));
    Result := (add Result (cons))
%
write Result

function true :
read
%
    Result := (cons nil nil)
%
write Result

function false :
read
%
    Result := nil
%
write Result

function not :
read Op1
%
    if Op1 then Result := (false) else Result := (true) fi
%
write Result

function and :
read Op1, Op2
%
    if (not Op1) then
        Result := (false)
    else
        if (not Op2) then
            Result := (false)
        else
            Result := (true)
        fi
    fi
%
write Result

function testRetourMultiple :
read Op1, Op2
%
    V1, V2 := Op1, Op2
%
write V1, V2

function jeVeuxMourir:
read Op1, Op2
%
    Test1, Test2, Test3 := (testRetourMultiple Op1 Op2), (cons);
    Test4 := (cons a (cons b nil))
%
write Test1, Test2